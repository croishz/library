=] transforming [=

2. Using WAI-ARIA

- WAI-ARIA Roles

WAI-ARIA role은 role 속성을 사용하여 요소에 설정된다. role 속성에서 정의된 role 속성에 유사하게.

이 스펙에 정의된 role은 문서 랜드마크와 WAI-ARIA role 분류체계을 포함한다. 

이 분류체계에서 role은 이들의 예상되는 행동은 RDF/OWL을 사용하여 모델링이 된다. 
role 분류체계의 특징은 각 role마다 다음의 정보를 제공한다. 

- role의 전달 정보 설명.
- 연관된 role에 관한 계층적 정보. (예시> directory는 list 타입이다.)
- role의 문맥.
- 다른 스펙에서의 관련 개념에 대한 참고.
- OWL을 사용하여,  의미 상속을 계층적으로 허용하는 유형을 제공한다. (class 계층과 유사하다.)
- 각 role마다 지원하는 state와 property. (예시> checkbox는 aria-checked를 통해 체킹되었음을 지원한다.)

사용한 role은 보조 기술에 각 요소를 어떻게 제어할 것인지에 관한 정보를 부여한다. 


- WAI-ARIA States and Properties

WAI-ARIA는 다양한 OS 플랫폼에서 플랫폼 접근성 api을 지원하기 위해 사용되는 접근성 state와 property에 관한 집합객체(collection)를 제공한다. 
보조 기술은 이 정보에 접근할 수 있다. 표시된 user agent DOM이나 플랫폼 접근성 api에 매핑한 것을 통해.
role과 결합될 때, user agent는 언제든지 보조 기술을 공급할 수 있다. 사용자에게 전달하기 위한 사용자 인터페이스 정보와 함께. 
state나 property의 변경은, 보조 기술에게 공지하는 것으로, 사용자에게 변경이 발생했음을 알리는 결과를 줄 것이다.

다음의 예시에서, list item(html의 LI element)은 체크가능한 메뉴 아이템을 생성하기 위해 사용되었으며, 자바스크립트 이벤트는 마우스와 키보드 이벤트를 잡아내 aria-checked의 값을 토글한다. 
role은 user agent에게 알려진 이 간단한 위젯의 행동을 만들기 위해 사용된다. 
aria-checked같은 사용자 행동에 의한 변경된 속성은 "state와 property 섹션"에서 정의되었다. 

어떤 접근성 state-관리 상태(managed states) 불리우는-는 user agent가 제어한다. 관리 상태의 예시는 키보드 초점과 section을 포함한다. 
관리 상태는 종종 스타일 변경을 정의하려는 css 가상 클래스- :focus와 ::selection과 같은-와 일치한다.
그에 반해서, 이 사양에서의 state는 일반적으로 작성자에 의해 제어되어 관리되지 않는 상태(unmanaged states)라 부른다.

어떤 state는 aria-posinset과 aria-setsize와 같은 것은 user agent에 의해 관리되는데, 작성자는, DOM이 불완전하고 user agent 계산이 부정확함을 야기한다면, 이를 덮어쓸 수 있다. 
user agnet는 관리 상태와 관리되지 않는 상태를 플랫폼 접근성 api에 맵핑한다. 

가장 최신의 user agent는 CSS 속성 선택자를 지원하며, 작성자를 허용한다. WAI-ARIA 속성 정보에 기반한 ui 변경을 만드는 것과 동등한 기능을 달성하는데 필요한 스크립트의 숫자를 줄이는 것을.
다음의 예시에서 CSS 선택자는, 글씨가 굵고 체크 마크의 이미지가 보여졌는지를, aria-checked 속성의 값에 기반하여 결정하는데 사용된다.

CSS가 체크 마크에 관한 시각적 표현을 토글하여 사용하지 않으면, 작성자는 menuitemcheckbox가 체크된 것인지를 나타내는 이미지를 관리하는 스크립트와 추가적인 마크업을 포함할 수 있다.

- Managing Focus

SVG Tiny는 ring 매커니즘-기본적으로 문서 순서를 따르며, 시스템 의존적인 입력 기능을 사용하여 구현되어야 하는 방법(대부분의 데스크탑 컴퓨터에서는 tab키)- 이란 유사한 탐색 방법을 제공한다.
SVG 작성자는 초점 사용이 가능한 속성을 조정하여 탐색 순서에서 요소를 둘 수 있고, 요소의 탐색 속성을 수정하여 탐색 순서를 동적으로 지정할 수 있다.

WAI-ARIA는 "복합" 위젯으로 알려지기도 한, 여러개의 "관리 컨테이너(Managing container)" 위젯을 포함한다. 해당의 경우, 관리 컨테이너는 활성화되었던 마지막 자손을 추적할 책임을 진다.(기본값은 보통 관리 컨테이너의 첫번째 항목이다.)
필수적이다. 관리 컨테이너가 사용 가능하고 일관된 전력을 유지하는 것은. 언제? 초점이 컨테이너에서 떠나거나 그러고나서 나중에 다시 잡힐 때에도. 

아마도 예외적일 수 있겠지만, 권장한다. 이전에 초점이 잡힌 컨테이너가 다시 초점이 잡힐 때, 활성화한 자손이 같은 요소이도록. 관리 컨테이너가 마지막으로 포커싱되었을 때의 활성화한 자손과.
예외는 관리 컨테이너 위젯의 컨텐츠가 변경되는 경우를 포함하는데, 메뉴바와 같은 위젯은 사용자가 기대한다. 항상 첫번째 항목으로 회귀하는 것을. 초점이 메뉴바로에서 떠났을 때.
예를 들어, tree 그룹의 두번째 항목이 사용자가 탭하여 트리 그룹을 벗어났을 때 활성화한 자손이었다면, 트리 그룹의 두번째 항목은 트리 그룹이 초점을 다시 잡혀질 때 활성화한 자손으로 계속 있어야 한다.
사용자는 또한 관리 컨테이너를 활성화할 수 있다. 그안의 자손 중 하나를 클릭하여.

관리 컨테이너 또는 그것의 활성화한 자손이 초점이 잡힐 때, 사용자는 추가적으로 방향키와 같은 키를 눌러 현재 활성화한 자손을 변경하는 것으로 관리 컨테이너를 탐색할 수 있다. 
어떤 메인 탐색 키(일반적으로 tab키)든 추가적으로 누르면 관리 컨테이너를 나와 다음 위젯으로 가게 한다. 

내용 작성자는 다음의 관리 컨테이너 role에서 초점을 관리할 것을 요구받는다.

combobox
grid
listbox
menu
menubar
radiogroup
tree
treegrid
tablist

초점 관리에 관한 보다 많은 정보는 WAI-ARIA 작성자 연습의 키보드 인터페이스 개발 섹션에서 찾을 수 있다.

3. Conformance

user agent에 의한 WAI-ARIA 절차는 호스트 언어의 네이티브 기능의 정상적인 동작을 간섭해서는 안된다. 
CSS 선택자가 WAI-ARIA 속성을 포함하고 있으면, user agent는 -DOM에서 속성이 추가/변경/제거되는 언제라도- 선택자에 매칭하거나-또는 더이상 매칭하지 않는- 요소의 시각적 표현을 업데이트해야한다.
user agent는 호스트 언어 기능의 매핑을 대체할 수 있다. 접근성 api로. 


6. state and property

6.2 Characteristics of States and Properties
- Used in Roles
해당 state나 property를 사용히는 role에 관한 조언 정보로, 
이 정보는 state나 property의 적절한 사용법의 이해를 돕기 위해 제공된다. 
주어진 state나 property의 사용은 나열된 것 외의 role에 사용될 때는 정의되지 않는다.  

- Inherits into Roles
state나 property를 조상 role로부터 상속받은 role에 대한 조언 정보.

- Value
    - ID reference
    동일 문서의 다른 요소의 id값을 참조.
    - ID reference list 
    한 개 이상의 id를 참조하는 목록.

6.4 Global States and Properties

# aria-describedby [usable all roles / ID reference list]
객체를 설명하는 요소(혹은 요소들)을 식별한다. aria-labelledby를 관련 참조하라.

aria-labelledby 속성은 aria-describedby에 유사하다. 둘 다 텍스트 대체를 계산하는 다른 요소를 참조한다는 데서.
그러나 label은 간결해야 한다. 더 많은 정보를 제공하기 위해 의도적으로 설명해야 하는 자리에선.

aria-describedby가 참조한 요소나 요소들은 전체 설명을 구성한다. 필요한 경우 여러 요소들에서 id 참조를 포함하거나, id가 참조한 요소와 함께 요소 집합(예, 문단paragraph)을 묶는다. 

# aria-details 


# aria-live [usable all roles / token]
- 사용 가능 값
1. assertive 
가장 높은 우선 순위를 지녔으며 사용자에게 바로 보여줘야 하는 영역에 대한 업데이트를 표시한다.
2. off (default)
해당 영역에 현재 포커싱이 사용되지 않는 한, 사용자에게 보여주지 않아야 하는 영역에 대한 업데이트를 표시한다.
3. polite
현재 문장의 리딩이 끝나거나 사용자가 키보드 사용을 멈추고 있을 때와 같은, 차후 매끄러운 기회에 보여줘야 하는 영역에 대한 업데이트를 표시한다. 

요소가 업데이트될 것이라는 걸 표시하고,  user agents와 보조 기술, 사용자에게 live 영역에서 기대할 수 있는 업데이트 유형을 설명한다.
이 속성의 값은 중요도 단위로 표현한다.

영역이 polite로 정의될 경우, 보조 기술은 사용자에게 업데이트에 대해 알리지만, 현재 작업을 중단하지 않으며, 업데이트는 낮은 우선순위를 갖는다.
영역이 assertive로 정의될 경우, 보조 기술은 즉시 사용자에게 알리며, 이전 업데이트의 음성 대기열을 지울 수도 있을 것이다.

politeness 수준은 기본적으로 업데이트를 위한 지시 메커니즘이며, user agent와 보조 기술에 강력한 제안으로 들어간다.
이 값은 user agent나 보조 기술, 또는 사용자에 의해 덮어씌워질 수 있다. 예를 들어, 보조 기술이 키를 누르거나 마우스 클릭에 대한 응답으로 변화가 일어나는 것을 결정할 수 있는 경우, 보조 기술은 aria-live 속성의 값이 달리 적혀있을지라도 즉각적으로 그 변화를 보여줄 것이다. 사용자에 따라 요구가 다르기 때문에, 일반적인 정의 기준에서의 어떤 politeness 수준을 지닌 live 영역에 대한 그들의 보조 기술의 응답을 뒤트는 것은 사용자에게 몫이 간다.

보조 기술은 사용자가 대기열과 중단을 통제할 수 있도록 수준을 상향시키거나 하향시키는 것을 선택할 수 있다. 

이 속성이 업데이트를 보낼 필요가 있는 객체에 대해 설정되지 않은 경우, politeness 수준은 aria-live 속성을 설정하는 가장 가까운 조상의 값이다.

aira-live 속성은 live 영역의 변화를 보여주는 순서을 위한 기본적인 결정이다. 실행은 또한 조상 계통에서 aria-live 속성이 설정되지 않은 경우, role에서 politeness의 기본 수준을 고려한다. (예, 로그 변경은 기본적으로 polite이다.) assertive 인 항목은 즉각적으로 보여지며, polite 항목들이 그 뒤를 따른다. user agent나 보조 기술은 적극적인 변화가 발생하면 대기열 변화를 지우는 것을 선택할 수 있다.(예, "적극적인 영역의 변경"은 모든 "현재 대기 중인 변경"를 제거할 수 있다.)

live 영역이 polite로 마크업되었을 때, 보조 기술은 차후 매끄러운 기회에 업데이트를 알려야 한다. 이를테면, 현재 문장의 리딩이 끝나거나 사용자가 키보드 사용을 멈추고 있을 때 같은.
live 영역이 assertive로 마크업되었을 때, 보조 기술은 즉각적으로 사용자에게 공지해야 한다. 중단은 사용자를 혼란스럽게 만들거나 사용자의 현재 작업을 완료하지 못하도록 만들 수 있기 때문에. 
작성자는 assertive 값을 사용하지 말야 한다. 중단이 반드시 필요하지 않는 한.

# aria-roledescription [usable all roles / string]

요소의 role에 대해 사람이 읽을 수 있고, 작성자 주의의 지역화한 설명을 정의한다.

몇몇의 보조 기술-스크린 리더와 같은-은 사용자 경험의 일부로서 요소의 역할을 보여준다.

# aria-label [usable all roles / string / HTML mapping attribute: title]

현재 요소에 레이블링한 문자열 값으로 정의한다. aria-labelledby를 관련 참조하라. 

aria-label의 목적은, aria-labelledby의 그것과 같다. 이것은 사용자에게 객체의 알아볼 수 있는 이름을 제공한다. 레이블에 대한 가장 일반적인 접근성 API 매핑은 접근 가능한 이름(Accessible Name) 속성이다.
**Accessible Name
접근 가능한 이름은 "사용자 인터페이스 요소"의 이름이다. 각 플랫폼 접근성 API는 접근 가능한 이름 속성을 제공한다. 접근 가능한 이름의 값은 사용자 인터페이스 요소의 보이거나(예. 버튼 텍스트) 보이지 않는(예. 아이콘을 설명하는 텍스트 대안) 속성으로부터 파생될 수 있다. Accessible description을 관련 참조하라. 접근 가능한 이름 속성에 관한 간단한 사용법은 OK 버튼으로 설명할 수 있다. 텍스트 "OK"는 접근가능한 이름이다. 버튼이 초점을 받았을 때, 보조 기술은 접근 가능한 이름과 플랫폼의 역활 설명을 연결시킬 수 있다. 예를 들어, 스크린 리더가 "push button OK" 또는 "OK button" 이라고 말할 수 있다. 연결 순서와 역활 설명에 관한 세부사항(예. "button", "push-button", "clickable button"등의 리딩 스피치)은 플랫폼 접근성 API나 보조기술에 의해 정의된다. 
**Accessible description
접근 가능한 설명은 접근 가능한 이름을 보완하는 인테페이스 요소와 관련된 추가적인 정보를 제공한다. 접근 가능한 설명은 시각적으로 인지할 수 있을 수도, 아닐 수도 있다.

레이블 텍스트가 화면에 보여진다면, 작성자는 aria-labelledby를 사용하고 aria-label은 사용하지 말아야 한다. 
요소의 이름이 요소의 내용으로부터 프로그래밍적으로 정의될 수 없는 예가 있을 수 있으며, 눈에 보이는 레이블을 제공하는 것이 원하는 사용자 경험이 아닌 예가 있다. 
대부분의 호스트 언어는 요소의 이름으로 사용할 수 있는 속성을 제공하나,(예. HTML의 title 속성) 이는 브라우저의 툴팁으로 보여줄 수 있다. 눈에 보이는 레이블이나 툴팁이 바람직하지 않은 경우, 작성자는 aria-label을 사용하여 요소의 접근 가능한 이름을 설정한다. 텍스트 대체 계산에 의한 요구로, user agent는 접근 가능한 이름 속성을 계산할 때 aria-label보다 aria-labelledby에게 우선 순위를 부여한다. 

# aria-labelledby [usable all roles / ID reference list / HTML mapping attribute: label]
레이블링한 현재 요소를 식별한다. aria-describedby를 관련 참조하라.

aria-labelledby의 목적은 aria-label과 같다. 이것은 사용자에게 객체의 알아볼 수 있는 이름을 제공한다. 레이블에 대한 가장 일반적인 접근성 API 매핑은 접근 가능한 이름(Accessible Name) 속성이다.

인터페이스가 화면에 보이는 레이블을 가질 수 없다면, 작성자는 aria-label을 사용하고 aria-labelledby를 사용하지 말아야 한다.  텍스트 대체 계산에 의한 요구로, user agent는 접근 가능한 이름 속성을 계산할 때 aria-label보다 aria-labelledby에게 우선 순위를 부여한다. 

aria-labelledby 속성은 aria-describedby와 텍스트 대안을 계산하기 위해 둘 다 다른 요소를 참조한다는 것이 유사하나, 보다 긴-장황한- 정보를 제공하기 위해 설명이 의도되었을 경우, 레이블은 간결해야 한다.

# aria-atomic [usable all roles / boolean / HTML mapping attribute: label]
- 사용 가능 값
1. false(default) 
보조 기술은 오직 변경된 노드-혹은 노드들-에 한해서 보여준다.
2. true
보조 기술은 모든 변경된 영역 전체-존재한다면, 작성자가 정의한 레이블까지 포함하여-를 보여준다.

aria-relevant 속성에 의해 정의된 변경 통보에 기반하여 변경된 영역을 보조 기술이 모두 혹은 오직 일부만 보여줄 지를 지시한다.
접근성 API와 문서 객체 모델(DOM) 모두, 변경된 문서의 영역을 결정하는 것을 보조 기술에게 허용하도록 이벤트를 제공한다.

live 영역의 내용이 변경된 경우, user agents는 변경된 요소를 검사하고 조상을 가로질러 aria-atomic 집합의 첫번째 요소를 찾아 아래 사례를 위한 적절한 양식을 지원해야 한다.

1. 조상 중 어느 누구도 분명하게 aria-atomic을 설정하지 않았다면, 기본값은 false이며, 보조 기술은 사용자에게 오직 변경된 노드만 보여준다.
2. aria-atomic이 분명하게 false로 설정되었다면, 보조 기술은 조상 고리를 검색하며 오르는 것을 멈추고 사용자게 오직 변경된 노드만을 보여준다.
3. aria-atomic이 분명하게 true로 설정되었다면, 보조 기술은 -존재한다면- 작성자가 정의한 live 영역의 레이블까지 포함하여 요소의 모든 내용을 보여준다.

aria-atomic이 true라면, 보조 기술은 여러 변화를 결합하여 모든 변경 영역을 한번에 보여주기로 선택할 수 있다.

# aria-relevant [usable all roles / token list]
- 사용 가능 값

live 영역 내의 접근성 트리가 수정되었을 때 user agent가 트리거할 알림을 지시한다. aria-atomic을 관련 참조하라.

이 속성은 띄어쓰기(space)로 다음 값들 - additions, removals, text - 의 목록의 범위를 정하거나 모든 값을 한번에 잡는 all로 대변된다.

이것은 단지 보여주기 위한 것이 아니라 의미상 중요한 변화를 묘사하기 위해 사용된다.
예를 들어, 로그의 꼭대기로부터 제거된 노드들은 다른 항목을 위한 공간을 생성할 목적으로 단지 제거되고, 

